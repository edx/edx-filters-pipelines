"""
The Purpose of this module is to expose captcha field in registration api, so that apps can switch this feature on/off
easily by changing the settings.

Provides a form for integrating Google's CAPTCHA into the user registration process.

This module contains the `CaptchaForm`, which extends the standard registration
form to include a hidden field for the CAPTCHA token.

## Configuration

To enable CAPTCHA validation during registration, you must update your Django
settings (e.g., in `lms.envs.*.py`) with the following configurations.

First, specify this form as the registration extension form:

    REGISTRATION_EXTENSION_FORM = 'edx_filters_pipelines.auth.form.CaptchaForm'
    ENABLE_DYNAMIC_REGISTRATION_FIELDS = True

Next, add captcha_token to the REGISTRATION_EXTRA_FIELDS dictionary.
You can set its value to 'required' or 'optional' based on your needs.

    REGISTRATION_EXTRA_FIELDS = {
        'captcha_token': 'optional', or 'required'
    }
Important: Before making the captcha_token field required, ensure that
your registration page UI and mobile apps are updated to:

    * Implement the Google CAPTCHA widget.
    * Capture the token generated by the widget.
    * Submit the token as captcha_token when the user submits the form.

Failure to update the UI will cause registration to fail with validation errors if the
field is marked as 'required'.
"""
from django.forms import Form, CharField


class CaptchaForm(Form):
    """
    This form is used to extend a registration form to capture the CAPTCHA token from the User.
    """
    captcha_token = CharField(
        required=False,  # This can be set to true based on REGISTRATION_EXTRA_FIELDS setting
        error_messages={'required': 'CAPTCHA token is required.'},
    )

    class Meta:
        serialization_options: dict = {
            'captcha_token': {'field_type': 'hidden'},
        }

    def save(self, commit=True):
        """
        This method is a placeholder to comply with the expected interface for registration forms.
        The CAPTCHA token does not need to be saved to the user model.

        Args:
            user: The user instance being registered.
            commit: Whether to commit the changes to the database. Not used here.

        Returns:
            None
        """
        # This form does not save any data to the user model. Just return a placeholder to comply with the interface.
        return CaptchaModel()


class CaptchaModel:
    """
    Placeholder model to comply with the expected interface.
    """

    def save(self):
        """
        Placeholder save method.
        """
        pass
